#include <stdio.h>

int notes[8];
int tracknum=0;
int delay=0;
int tracksz[16]={0};

int main(int argc, char ** argv)
{
	FILE * fp = fopen(argv[1],"rb");
	FILE * out = fopen("TEMP","wb");
	FILE * fp2 = fopen(argv[2],"wb");
start:
	fseek(fp,5*tracknum,SEEK_SET);
	int ev = getc(fp);
	if(ev==0xC1)
	{
		fseek(fp,(5*tracknum)+2,SEEK_SET);
		long off = (getc(fp)<<16) + (getc(fp)<<8) + getc(fp);
		fseek(fp,off,SEEK_SET);
		while(ev!=0xFF)
		{
			ev = getc(fp);
			if(ev<0x80)
			{
				if(delay<=0x7F)
				{
					putc(delay,out);
					tracksz[tracknum]+=4;
				}
				else if(delay<=0x3FFF)
				{
					putc(0x80+(delay>>7),out);
					putc(delay&0x7F,out);
					tracksz[tracknum]+=5;
				}
				else if(delay<=0x1FFFFF)
				{
					putc(0x80+(delay>>14),out);
					putc(0x80+((delay>>7)&0x7F),out);
					putc(delay&0x7F,out);
					tracksz[tracknum]+=6;
				}
				else if(delay<=0xFFFFFFF)
				{
					putc(0x80+(delay>>21),out);
					putc(0x80+((delay>>14)&0x7F),out);
					putc(0x80+((delay>>7)&0x7F),out);
					putc(delay&0x7F,out);
					tracksz[tracknum]+=7;
				}
				putc(0x90,out);
				int note = ev;
				putc(note,out);
				int ppid = getc(fp);
				notes[ppid]=note;
				int vol = getc(fp);
				putc(vol,out);
				delay=0;
			}
			else if(ev==0x80)
			{
				delay += getc(fp);
			}
			else if(ev<0x88)
			{
				if(delay<=0x7F)
				{
					putc(delay,out);
					tracksz[tracknum]+=4;
				}
				else if(delay<=0x3FFF)
				{
					putc(0x80+(delay>>7),out);
					putc(delay&0x7F,out);
					tracksz[tracknum]+=5;
				}
				else if(delay<=0x1FFFFF)
				{
					putc(0x80+(delay>>14),out);
					putc(0x80+((delay>>7)&0x7F),out);
					putc(delay&0x7F,out);
					tracksz[tracknum]+=6;
				}
				else if(delay<=0xFFFFFFF)
				{
					putc(0x80+(delay>>21),out);
					putc(0x80+((delay>>14)&0x7F),out);
					putc(0x80+((delay>>7)&0x7F),out);
					putc(delay&0x7F,out);
					tracksz[tracknum]+=7;
				}
				putc(0x80,out);
				int note = notes[ev&7];
				putc(note,out);
				putc(0,out);
				delay=0;
			}
			else if(ev==0x88)
			{
				delay += (getc(fp)<<8) + getc(fp);
			}
			else if(ev==0x98) fseek(fp,2,SEEK_CUR);
			else if(ev==0x9A) fseek(fp,3,SEEK_CUR);
			else if(ev==0x9C) fseek(fp,3,SEEK_CUR);
			else if(ev==0x9E) fseek(fp,4,SEEK_CUR);
			else if(ev==0xA0) fseek(fp,2,SEEK_CUR);
			else if(ev==0xA3) fseek(fp,2,SEEK_CUR);
			else if(ev==0xA4) fseek(fp,2,SEEK_CUR);
			else if(ev==0xA5) fseek(fp,2,SEEK_CUR);
			else if(ev==0xA7) fseek(fp,2,SEEK_CUR);
			else if(ev==0xA9) fseek(fp,4,SEEK_CUR);
			else if(ev==0xAA) fseek(fp,4,SEEK_CUR);
			else if(ev==0xAC) fseek(fp,3,SEEK_CUR);
			else if(ev==0xAD) fseek(fp,3,SEEK_CUR);
			else if(ev==0xB1)
			{
				fseek(fp,1,SEEK_CUR);
				int flag = getc(fp);
				if(flag==0x40) fseek(fp,2,SEEK_CUR);
				else if(flag==0x80) fseek(fp,4,SEEK_CUR);
			}
			else if(ev==0xB8) fseek(fp,2,SEEK_CUR);
			else if(ev==0xC2) fseek(fp,1,SEEK_CUR);
			else if(ev==0xC4) fseek(fp,4,SEEK_CUR);
			else if(ev==0xC5) fseek(fp,3,SEEK_CUR);
			else if(ev==0xC6) fseek(fp,1,SEEK_CUR);
			else if(ev==0xC7) fseek(fp,4,SEEK_CUR);
			else if(ev==0xC8) fseek(fp,4,SEEK_CUR);
			else if(ev==0xCB) fseek(fp,2,SEEK_CUR);
			else if(ev==0xCC) fseek(fp,2,SEEK_CUR);
			else if(ev==0xCF) fseek(fp,1,SEEK_CUR);
			else if(ev==0xD0) fseek(fp,2,SEEK_CUR);
			else if(ev==0xD1) fseek(fp,2,SEEK_CUR);
			else if(ev==0xD2) fseek(fp,2,SEEK_CUR);
			else if(ev==0xD5) fseek(fp,2,SEEK_CUR);
			else if(ev==0xDA) fseek(fp,1,SEEK_CUR);
			else if(ev==0xDB) fseek(fp,1,SEEK_CUR);
			else if(ev==0xDD) fseek(fp,3,SEEK_CUR);
			else if(ev==0xDF) fseek(fp,4,SEEK_CUR);
			else if(ev==0xE0) fseek(fp,3,SEEK_CUR);
			else if(ev==0xE6) fseek(fp,2,SEEK_CUR);
			else if(ev==0xE7) fseek(fp,2,SEEK_CUR);
			else if(ev==0xEF) fseek(fp,3,SEEK_CUR);
			else if(ev==0xF0)
			{
				int value = getc(fp);
				while(value&0x80)
				{
					value=(value&0x7F)<<7;
					value+=getc(fp);
				}
				delay += value;
			}
			else if(ev==0xF1) fseek(fp,1,SEEK_CUR);
			else if(ev==0xF4) fseek(fp,1,SEEK_CUR);
			else if(ev==0xF9) fseek(fp,2,SEEK_CUR);
			else if(ev==0xFD) fseek(fp,2,SEEK_CUR);
			else if(ev==0xFE) fseek(fp,2,SEEK_CUR);
		}
		putc(0,out);
		putc(0xFF,out);
		putc(0x2F,out);
		putc(0,out);
		tracksz[tracknum]+=4;
		tracknum++;
		goto start;
	}
	fclose(fp);
	fclose(out);
	out = fopen("TEMP","rb");
	putc('M',fp2);
	putc('T',fp2);
	putc('h',fp2);
	putc('d',fp2);
	putc(0,fp2);
	putc(0,fp2);
	putc(0,fp2);
	putc(6,fp2);
	putc(0,fp2);
	putc(1,fp2);
	putc(0,fp2);
	putc(tracknum,fp2);
	putc(0,fp2);
	putc(120,fp2);
	for(int i=0; i<tracknum; i++)
	{
		putc('M',fp2);
		putc('T',fp2);
		putc('r',fp2);
		putc('k',fp2);
		putc(0,fp2);
		putc((tracksz[i]&0xFF0000)>>16,fp2);
		putc((tracksz[i]&0xFF00)>>8,fp2);
		putc(tracksz[i]&0xFF,fp2);
		for(int j=0; j<tracksz[i]; j++)
		{
			int w = getc(out);
			putc(w,fp2);
		}
	}
	fclose(fp2);
	fclose(out);
	return 0;
}
